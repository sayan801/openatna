<?xml version="1.0" encoding="UTF-8"?>
<!--

     Copyright (c) 2009 Misys Open Source Solutions (MOSS) and others

     Licensed under the Apache License, Version 2.0 (the "License");
     you may not use this file except in compliance with the License.
     You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

     Unless required by applicable law or agreed to in writing, software
     distributed under the License is distributed on an "AS IS" BASIS,
     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
     implied. See the License for the specific language governing
     permissions and limitations under the License.

     Contributors:
       Misys Open Source Solutions - initial API and implementation


-->
<!--Note: This file is the starting point of All the Actor configuration;
	all other config files should be linked from here. -->

<!--Each configuration file has a root Configuration tag-->
<Configuration>

    <!--Defines the configuration of Audit Repository Server-->
    <ConnectionFile file="ArrConnections.xml"/>

    <!--The ARR actor configuration-->
    <Actor name="arr" type="SecureNode">
        <Description>Audit Record Repository</Description>
        <Tcp connection="arr-tls"/>
        <Udp connection="arr-udp"/>
        <!--
        Max number of threads to use for dispatching messages for processing.
        Default = 5
        -->
        <!--
        <ExecutionThreads>5</ExecutionThreads>
        -->
        <ServiceConfig>
            <!--
            A DaoFactory implementation. This should implement the
            org.openhealthtools.openatna.persistence.dao.DaoFactory interface
            and have a default constructor. If not supplied, the default Spring/hibernate
            DaoFactory will be used.
            -->
            <!--><daoFactory>my.dao.FactoryImpl</daoFactory>-->
            <!--
            the class name of the Syslog Log Message implementation
            This must implement org.openhealthtools.syslog.LogMessage<AtnaMessage> and have a default constructor
            In general, this will have some message (de)serialization
            behind it because the LogMessage receives a stream and must return an AtnaMessage.
            The org.openhealthtools.openatna.audit.process.AtnaLogMessage is provided as a convenience
            abstract class from which to derive LogMessage<AtnaMessage> objects. This takes an implementation
            of an org.openhealthtools.openatna.anom.AtnaIOFactory which performs the (de)serialization for it.
            The default uses JAXB to serialize to and from the wire.
            -->
            <LogMessage>org.openhealthtools.openatna.dist.JaxbLogMessage</LogMessage>
            <!--
            policies on what unknown entities to allow into the repository via audit messages
            see org.openhealthtools.openatna.persistence.PersistencePolicies for more details
            -->
            <PersistencePolicies>
                <allowNewNetworkAccessPoints>true</allowNewNetworkAccessPoints>
                <allowNewParticipants>true</allowNewParticipants>
                <allowNewObjects>true</allowNewObjects>
                <allowNewSources>true</allowNewSources>
                <allowUnknownDetailTypes>true</allowUnknownDetailTypes>
                <!-- is false be default anyway -->
                <errorOnDuplicateInsert>false</errorOnDuplicateInsert>
                <!--<allowNewCodes>true</allowNewCodes>-->
            </PersistencePolicies>
            <!--
           Processor chain configuration.
           If the ProcessorChain element has an attribute "validate" and its value is "false",
           then the default message validator will not be used, and another one should be
           specified below.

           The specified Processors must implement org.openhealthtools.openatna.audit.process.AtnaProcessor
           and should have a default constructor. They are added in the order they are listed below.
           If the default validator is used, this is always run at the beginning of the chain so application
           specific processors know the message has been validated.
           If no processor is added that sets the ProcessContext's state to PERSISTED, then the default
           PersistenceProcessor is added after the processors defined below.
           External implementations can add their processors to the all/ext directory. These will be picked
           up during the build and be available to OpenATNA at runtime.

           Processors can be associated with a phase of processing. Currently three phases are supported:
           PRE_VERIFY - processors are invoked before the message has be verified.
           POST_VERIFY - processors are invoked after the message has been verified, but before
           it has been persisted. This is the default phase, meaning if no phase attribute is specified,
           then the processor will be placed in this phase
           POST_PERSIST - processors are invoked after the message has been persisted to the data base.
           -->
            <!--

            <ProcessorChain validate="true">
                <Processor phase="POST_PERSIST">org.openhealthtools.openatna.ext.processors.SimpleProcessor</Processor>
            </ProcessorChain>
            -->

            <!--
            Codes URLs - these are locations of files containing codes required by openATNA.
            See atnacodes.xml for the syntax. atnacodes.xml are loaded by default. Any other
            codes can be added here as a URL string
            -->
            <!--
            <CodesUrl>file:/my/codes/codes.xml</CodesUrl>
            -->

        </ServiceConfig>
    </Actor>

</Configuration>